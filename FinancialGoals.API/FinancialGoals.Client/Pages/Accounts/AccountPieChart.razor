@using ChartJs.Blazor.PieChart
@using FinancialGoals.Core.DTOs.Account
@using System.Drawing

@inject ITransactionService TransactionService

@if (Account != null)
{
    <div style="font-family: EightBitsFont;">
        <Chart Config="_config"></Chart>
    </div>
}


@code {
    [Parameter]
    public AccountToReturn Account { get; set; }
    [Parameter]
    public DateTime? Date { get; set; }

    private PieConfig _config = new PieConfig();

    protected override async Task OnParametersSetAsync()
    {
        await UpdateConfigAsync();
    }

    private async Task UpdateConfigAsync()
    {
        Date ??= DateTime.Today;
        
        _config.Options = new PieOptions
        {
            Responsive = true,
            Legend = new Legend
            {
                Position = Position.Right
            },
            Title = new OptionsTitle
            {
                Display = true,
                Text = $"Expenses by categories in year: {Date.Value.Year}, month: {Date.Value:MMMM}"
            }
        };

        var data = await TransactionService.GetExpensesAmountByCategoryPerMonth(Account.FinancialAccountId, Date.Value.Year, Date.Value.Month);

        var dataset = CreateRandomColoredPieDataset(data.Select(x => (x.Amount, x.Color)).ToList());

        _config.Data.Labels.Clear();
        
        foreach (var categoryName in data.Select(x => x.CategoryName))
        {
            _config.Data.Labels.Add(categoryName);
        }

        _config.Data.Datasets.Clear();
        _config.Data.Datasets.Add(dataset);

        StateHasChanged();
    }

    private PieDataset<decimal> CreateRandomColoredPieDataset(List<(decimal Amount, string Color)> data)
    {
        var backgroundColors = new List<string>();

        for (int i = 0; i < data.Count; i++)
        {
            backgroundColors.Add(data[i].Color);
        }

        var dataset = new PieDataset<decimal>(data.Select(x => x.Amount))
        {
            BackgroundColor = backgroundColors.ToArray()
        };

        return dataset;
    }
}