@page "/categories"

@inject IModalService modal
@inject ICategoryService CategoryService
@inject ImageService ImageService
@using Microsoft.VisualBasic
@using FinancialGoals.Client.Services
@using ImageService = FinancialGoals.Client.Services.ImageService
@using ModalOptions = Blazored.Modal.ModalOptions
@implements IDisposable

@if (!string.IsNullOrWhiteSpace(alertMessage))
{
    <Alert Type="@AlertType.Success" Message="@alertMessage" Closable Style="font-family: EightBitsFont"/>
}
<PageTitle>Categories</PageTitle>
<GridRow>
    <GridCol Span="3">
        <h3>Categories</h3>
        @* <img src="@imageSource" alt="Image" /> *@
        @* <img src="@imageSource" alt="Image" /> *@
    </GridCol>
    <GridCol>
        <div>
            <Button Shape="@ButtonShape.Circle" Icon="plus" @onclick="@(OpenCreateForm)" Type="primary"/>
        </div>
    </GridCol>
</GridRow>

@if (CategoryService.Categories == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <GridRow>
            @foreach (var category in CategoryService.Categories)
                {
                    <GridCol Span="6">
                        <Card
                            Style="width: 300px;" Bordered Cover="coverTemplate(category.Image.ImageBytes, category.Image.ImageName)"
                            Title=@(category.Name)
                            Actions="@(new[] {
                                         actionEdit(() => OpenEditForm(category.CategoryId)), 
                                         actionDelete(() => OpenDeleteForm(category.CategoryId, category.Name)) })">
                            <Divider Orientation="center">
                                @* <img src="@convert(category.Image.ImageBytes)"/> *@
                                @category.Amount / @category.Limit
                            </Divider>
                        </Card>
                    </GridCol>
                }
        </GridRow>
    </div>
}

@* <style> *@
@*     .custom-modal-overlay{ *@
@*         color: #0b5ed7; *@
@*     } *@
@* </style> *@

@code {
    private Stream imageStream;
    private string imageSource;
    private string alertMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetCategories();
        CategoryService.OnChange += StateHasChanged;
    }

    private string getImageDataFromBytes(byte[] imageData)
    {
        string base64Image = Convert.ToBase64String(imageData);
        return $"data:image/png;base64,{base64Image}";
    }
    
    RenderFragment coverTemplate (byte[] imageData, string imageName) => 
        @<img Style="width: 150px; margin: auto" alt="@imageName" src="@getImageDataFromBytes(imageData)" />;

    public void Dispose()
    {
        CategoryService.OnChange -= StateHasChanged;
    }
    
    RenderFragment actionEdit(Action clickAction) =>@<Icon Type="edit" OnClick="@clickAction" />;
    RenderFragment actionDelete(Action clickAction) =>@<Icon Type="delete" OnClick="@clickAction" />;

    private async Task OpenCreateForm()
    {
        var options = new ModalOptions() 
        { 
            OverlayCustomClass = "custom-modal-overlay"
        };
        
        var parameters = new ModalParameters().Add("message", alertMessage);
        
        var message = modal.Show<CategoriesAdd>("Create category");
        var result = await message.Result;

        if (result.Confirmed)
        {
            alertMessage = result.Data.ToString();
            StateHasChanged();
        }
    }
    
    private void OpenEditForm(int ItemId)
    {
        var parameters = new ModalParameters().Add(nameof(CategoriesEdit.ItemId), ItemId);
        modal.Show<CategoriesEdit>("Edit category", parameters);
    }

    private void OpenDeleteForm(int ItemId, string ItemName)
    {
        var parameters = new ModalParameters().Add(nameof(CategoriesEdit.ItemId), ItemId);
        modal.Show<CategoryDelete>($"Are you sure that you want to delete '{ItemName}' category?", parameters);
    }
}