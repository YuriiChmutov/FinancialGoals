@page "/categoriesAdd"

@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@using FinancialGoals.Core.DTOs.Category

@inject ICategoryService CategoryService
@inject IMessageService _message

<div class="container py-5 h-100">
    <Form Model="@categoryToCreate">
        
        <div class="row">
            <div class="col-md-6 mb-4">
                <div class="form-outline">
                    <label for="name">Category name</label>
                    <Input id="name" @bind-Value="@context.Name" class="form-control" style="border-radius: 5px"/>
                    <ValidationMessage For="@(() => categoryToCreate.Name)"/>
                </div>
                
                <div class="form-outline">
                    <label for="limit">Limit</label>
                    <AntDesign.InputNumber @bind-Value="@context.Limit"
                                           Style="font-family: EightBitsFont; 
                                                        border-radius: 5px;
                                                         width: auto";/>
                    <ValidationMessage For="@(() => categoryToCreate.Limit)"/>
                </div>
            </div>
            
            <div class="col-md-6 mb-4" style="text-align: center; margin-top: 3%">
                <Upload Action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
                        Name="avatar"
                        Class="avatar-uploader"
                        ListType="picture-card"
                        ShowUploadList="false"
                        BeforeUpload="BeforeUpload"
                        OnChange=@HandleChange>
                    @if (!string.IsNullOrWhiteSpace(imageUrl))
                    {
                        <img src="@imageUrl" alt="avatar" style="width: 100%"/>
                    }
                    else
                    {
                        <div>
                            <Icon Spin="loading" Type="@(loading ? "Loading" : "plus")"></Icon>
                            <div className="ant-upload-text">Upload</div>
                        </div>
                    }
                </Upload>
            </div>
        </div>

        <Divider Orientation="right">
            <Button Color="@Color.Green6" Type="@ButtonType.Primary" HtmlType="submit" @onclick="CreateCategory">
                Create
            </Button>
            <Button Type="@ButtonType.Dashed" @onclick="Close">
                Cancel
            </Button>
        </Divider>
    </Form>
</div>



@code {
    CategoryToCreate categoryToCreate = new CategoryToCreate();
    
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public int AccountId { get; set; }

    private async Task CreateCategory()
    {
        var result = await CategoryService.AddCategory(categoryToCreate, AccountId);
        if (result) await BlazoredModal.CloseAsync(ModalResult.Ok($"{categoryToCreate.Name} category was created successfully!"));    
    }
    
    private async Task Close() => await BlazoredModal.CloseAsync();
    
    bool loading = false;

    string imageUrl;
    
    bool BeforeUpload(UploadFileItem file)
    {
        var isJpgOrPng = file.Type == "image/jpeg" || file.Type == "image/png";
        if (!isJpgOrPng)
        {
            _message.Error("You can only upload JPG/PNG file!");
        }
        var isLt2M = file.Size / 1024 / 1024 < 2;
        if (!isLt2M)
        {
            _message.Error("Image must smaller than 2MB!");
        }
        return isJpgOrPng && isLt2M;
    }
    
    private void HandleChange(UploadInfo fileinfo)
    {
        if (fileinfo.File.State == UploadState.Success)
        {
            imageUrl = fileinfo.File.ObjectURL;
            
            var uploadedFile = new UploadedFileModel
            {
                Name = fileinfo.File.FileName,
                Type = fileinfo.File.Type,
                Size = fileinfo.File.Size,
                Data = GetFileData(fileinfo.File.ObjectURL).Result
            };
    
            categoryToCreate.File = uploadedFile;
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private async Task<byte[]> GetFileData(string objectURL)
    {
        using (var httpClient = new HttpClient())
        {
            return await httpClient.GetByteArrayAsync(objectURL);
        }
    }
}