@page "/categoriesAdd"

@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@using FinancialGoals.Core.DTOs.Category

@inject ICategoryService CategoryService
@inject IMessageService _message

<Form Model="@categoryToCreate"
      LabelColSpan="4"
      WrapperColSpan="18">
    <DataAnnotationsValidator/>
    <FormItem ShowFeedbackOnError="true">
        <label for="" style="font-family: EightBitsFont">Name</label>
        <Input @bind-Value="@context.Name"/>
    </FormItem>
    <FormItem Label="Limit" ShowFeedbackOnError="true" Style="font-family: EightBitsFont">
        <AntDesign.InputNumber @bind-Value="@context.Limit" Style="font-family: EightBitsFont; border-radius: 5px"/>
    </FormItem>
            
    <Upload Action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
            Name="avatar"
            Class="avatar-uploader"
            ListType="picture-card"
            ShowUploadList="false"
            BeforeUpload="BeforeUpload"
            OnChange="HandleChange">
        @if (!string.IsNullOrWhiteSpace(imageUrl))
        {
            <img src="@imageUrl" alt="avatar" style="width: 100%" />
        }
        else
        {
            <div>
                <Icon Spin="loading" Type="@(loading?"Loading":"plus")" ></Icon>
                <div className="ant-upload-text">Upload</div>
            </div>
        }
    </Upload>
            
            
    <Divider Orientation="right">
        <Button Color="@Color.Green6" Type="@ButtonType.Primary" HtmlType="submit" @onclick="CreateCategory">
            Create
        </Button>
        <Button Type="@ButtonType.Dashed" @onclick="Close">
            Cancel
        </Button>
    </Divider>
</Form>


@* <body class="modal-open"> *@
@*     <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" style="display: block; padding-left: 0px;" aria-modal="true"> *@
@*         <div class="modal-backdrop fade show" @onclick="Close"></div> *@
@*             <div class="modal-dialog modal-md  modal-dialog-centered" style="z-index: 1050"> *@
@*                 <div class="modal-content rounded-0"> *@
@*                     <div class="modal-body py-0"> *@
@*                         <div class="d-flex main-content"> *@
@*                             <div class="content-text p-4"> *@
@*                                 <h3>Log in</h3> *@
@*                                 <p> *@
@*                                     All their equipment and instruments are alive. The sky was cloudless and of a deep dark blue. *@
@*                                 </p> *@
@*                                 <form action="#"> *@
@*                                     <div class="form-group"> *@
@*                                         <label for="">Email</label> *@
@*                                         <input class="form-control" type="email" placeholder="Enter email"/> *@
@*                                     </div> *@
@*                                     <div class="form-group"> *@
@*                                         <label for="">Password</label> *@
@*                                         <input class="form-control" type="email" placeholder="Enter password"/> *@
@*                                     </div> *@
@*                                     <div class="form-group d-flex align-items-center"> *@
@*                                         <input class="btn btn-primary mr-3 px-5" type="submit" value="Submit"> *@
@*                                         <p class="custom-note mb-0"> *@
@*                                             <a href="">Fogrot password</a> *@
@*                                         </p> *@
@*                                     </div> *@
@*                                     <div class="form-group "> *@
@*                                         <p class="custom-note"> *@
@*                                             <small> *@
@*                                                 If you don't have account yet *@
@*                                                 <a href="">Sign up here</a> *@
@*                                             </small> *@
@*                                         </p> *@
@*                                     </div> *@
@*                                 </form> *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@* </body> *@


@* <div class="modal fade show d-block" tabindex="-1" role="dialog"> *@
@*     <div class="modal-backdrop fade show" @onclick="Close"></div> *@
@*     <div class="modal-dialog" style="z-index: 1050"> *@
@*         <!-- Pop it above the backdrop --> *@
@*         <div class="modal-content"> *@
@*             <div class="modal-header"> *@
@*                 <h5 class="modal-title">Modal title</h5> *@
@*                 <button type="button" class="close" aria-label="Close" @onclick="Close"> *@
@*                     <span aria-hidden="true">&times;</span> *@
@*                 </button> *@
@*             </div> *@
@*             <div class="modal-body"> *@
@*                 <p>Test</p> *@
@*             </div> *@
@*             <div class="modal-footer"> *@
@*                 <button type="button" class="btn btn-secondary" @onclick="Close">Close</button> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@* <div class="modal frame fade top show" tabindex="-1" aria-labelledby="exampleFrameModal1" style="display: block;" *@
@*      data-gtm-vis-first-on-screen-2340190_1302="111002" data-gtm-vis-total-visible-time-2340190_1302="100" *@
@*      data-gtm-vis-has-fired-2340190_1302="1" aria-modal="true" role="dialog"> *@
@*     <div class="modal-dialog modal-frame modal-top"> *@
@*         <div class="modal-content rounded-0"> *@
@*             <div class="modal-body py-1"> *@
@*                 <div class="d-flex justify-content-center align-items-center my-3"> *@
@*                     <h4> *@
@*                         <span class="badge bg-primary">test</span> *@
@*                         <p class="pt-3 mx-4"> *@
@*                             test test test *@
@*                         </p> *@
@*                         <button class="btn btn-primary btn-sm ms-2" type="button">use it</button> *@
@*                     </h4> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@code {
    CategoryToCreate categoryToCreate = new CategoryToCreate();
    
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CreateCategory()
    {
        var result = await CategoryService.AddCategory(categoryToCreate);
        if (result) await BlazoredModal.CloseAsync(ModalResult.Ok($"{categoryToCreate.Name} category was created successfully!"));    
    }
    
    private async Task Close() => await BlazoredModal.CloseAsync();
    
    bool loading = false;

    string imageUrl;
    
    bool BeforeUpload(UploadFileItem file)
    {
        var isJpgOrPng = file.Type == "image/jpeg" || file.Type == "image/png";
        if (!isJpgOrPng)
        {
            _message.Error("You can only upload JPG/PNG file!");
        }
        var isLt2M = file.Size / 1024 / 1024 < 2;
        if (!isLt2M)
        {
            _message.Error("Image must smaller than 2MB!");
        }
        return isJpgOrPng && isLt2M;
    }
    
    async void HandleChange(UploadInfo fileinfo) // todo change to Task
    {
        if (fileinfo.File.State == UploadState.Success)
        {
            imageUrl = fileinfo.File.ObjectURL;
            
            var uploadedFile = new UploadedFileModel
            {
                Name = fileinfo.File.FileName,
                Type = fileinfo.File.Type,
                Size = fileinfo.File.Size,
                Data = await GetFileData(fileinfo.File.ObjectURL)
            };
    
            categoryToCreate.File = uploadedFile;
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private async Task<byte[]> GetFileData(string objectURL)
    {
        using (var httpClient = new HttpClient())
        {
            return await httpClient.GetByteArrayAsync(objectURL);
        }
    }
}