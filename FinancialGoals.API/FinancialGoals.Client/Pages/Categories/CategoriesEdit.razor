@* @page "/CategoriesEdit" *@

@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@using AutoMapper
@using FinancialGoals.Core.DTOs.Category

@inject HttpClient Http
@inject ICategoryService CategoryService
@inject IMapper Mapper

@if (categoryModified == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        @categoryModified.CategoryId
    </div>
    
    <Form Model="@categoryModified"
          LabelColSpan="8"
          WrapperColSpan="16">
        <DataAnnotationsValidator/>
        <FormItem Label="Name" ShowFeedbackOnError="true">
            <Input @bind-Value="@context.Name"/>
        </FormItem>
        <FormItem Label="Limit" ShowFeedbackOnError="true">
            <AntDesign.InputNumber @bind-Value="@context.Limit" />
        </FormItem>

        <Divider Orientation="right">
            <Button Type="@ButtonType.Primary" HtmlType="submit" @onclick="UpdateItem">
                Update
            </Button>
            <Button Type="@ButtonType.Dashed" @onclick="Close">
                Cancel
            </Button>
        </Divider>
    </Form>
}

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public int ItemId { get; set; }
    
    private CategoryToUpdate categoryModified;

    protected override async Task OnInitializedAsync()
    {
        var categoryToReturn = await Http.GetFromJsonAsync<CategoryToReturn>($"https://localhost:7128/api/Categories/{ItemId}");
        categoryModified = Mapper.Map<CategoryToUpdate>(categoryToReturn);
    }
    
    // private Category editItem = new Category();

    private void EditItem(long id)
    {
        //editItem = todoItems.Single(i => i.Id == id);
    }
    
    private async Task Close() => await BlazoredModal.CloseAsync();

    private async Task UpdateItem()
    {
        var result = await CategoryService.UpdateCategory(categoryModified);
        if (result) await BlazoredModal.CloseAsync();
    }
}