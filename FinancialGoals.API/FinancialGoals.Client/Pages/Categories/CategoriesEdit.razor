@using AutoMapper
@using FinancialGoals.Core.DTOs.Category

@inject HttpClient Http
@inject ICategoryService CategoryService
@inject IMapper Mapper
@inject IMessageService _message

@if (categoryModified == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container py-5 h-100">
        <Form Model="@categoryModified">
            
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="form-outline">
                        <label style="margin-left: 1%" for="name">Category name</label>
                        <Input id="name" @bind-Value="@context.Name" class="form-control" style="border-radius: 5px"/>
                        <ValidationMessage For="@(() => context.Name)"/>
                    </div>
                    
                    <div class="form-outline">
                        <div>
                            <label style="margin-left: 1%" for="limit">Limit</label>
                        </div>
                        <GridRow Justify="space-between">
                            <GridCol Span="16">
                                <AntDesign.InputNumber @bind-Value="@context.Limit"
                                                       Style="font-family: EightBitsFont; 
                                                                    border-radius: 5px;
                                                                     width: auto"/>
                                <ValidationMessage For="@(() => context.Limit)"/>
                            </GridCol>
                            <GridCol Span="8" Style="flex: initial">
                                <SfColorPicker  TValue="string" @bind-Value="@context.Color"/>
                            </GridCol>
                        </GridRow>
                    </div>
                    <div>
                        
                    </div>
                </div>
            
                <div class="col-md-6 mb-4" style="text-align: center; margin-top: 3%">
                    <Upload Action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
                            Name="avatar"
                            Class="avatar-uploader"
                            ListType="picture-card"
                            ShowUploadList="false"
                            BeforeUpload="BeforeUpload"
                            OnChange="HandleChange">
                        @if (!string.IsNullOrWhiteSpace(imageUrl))
                        {
                            <img src="@imageUrl" alt="avatar" style="width: 100%"/>
                        }
                        else
                        {
                            <div>
                                <Icon Spin="loading" Type="@(loading ? "Loading" : "plus")"></Icon>
                                <div className="ant-upload-text">Upload</div>
                            </div>
                        }
                    </Upload>
                </div>
            </div>
            <Divider Orientation="right">
                <Button Type="@ButtonType.Primary" HtmlType="submit" @onclick="UpdateItem">
                    Update
                </Button>
                <Button Type="@ButtonType.Dashed" @onclick="Close">
                    Cancel
                </Button>
            </Divider>
        </Form>
    </div>
}

@code {
    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] 
    public int ItemId { get; set; }
    [Parameter]
    public int AccountId { get; set; }
    
    private CategoryToUpdate categoryModified;
    string imageUrl;
    bool loading = false;
    string originalName;

    protected override async Task OnInitializedAsync()
    {
        var categoryToReturn = await Http.GetFromJsonAsync<CategoryToReturn>($"https://localhost:7128/api/Categories/{ItemId}");
        categoryModified = Mapper.Map<CategoryToUpdate>(categoryToReturn);
        
        imageUrl = getImageDataFromBytes(categoryToReturn.Image.ImageBytes);
        originalName = categoryToReturn.Name;
        categoryModified.File = new UploadedFileModel
        {
            Name = categoryToReturn.Image.ImageName,
            Type = "application/octet-stream",
            Size = categoryToReturn.Image.ImageBytes.Length,
            Data = await GetFileData(imageUrl)
        };

        categoryModified.Changed = new CategoryWhatWasChanged();
    }
    
    bool BeforeUpload(UploadFileItem file)
    {
        var isJpgOrPng = file.Type == "image/jpeg" || file.Type == "image/png";
        if (!isJpgOrPng)
        {
            _message.Error("You can only upload JPG/PNG file!");
        }
        var isLt2M = file.Size / 1024 / 1024 < 2;
        if (!isLt2M)
        {
            _message.Error("Image must smaller than 2MB!");
        }
        return isJpgOrPng && isLt2M;
    }
    
    async void HandleChange(UploadInfo fileinfo) // todo change to Task
    {
        if (fileinfo.File.State == UploadState.Success)
        {
            imageUrl = fileinfo.File.ObjectURL;
            
            var uploadedFile = new UploadedFileModel
            {
                Name = fileinfo.File.FileName,
                Type = fileinfo.File.Type,
                Size = fileinfo.File.Size,
                Data = await GetFileData(fileinfo.File.ObjectURL)
            };
    
            categoryModified.File = uploadedFile;
            categoryModified.Changed.Image = true;
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private async Task Close() => await BlazoredModal.CloseAsync();

    private async Task UpdateItem()
    {
        if (originalName != categoryModified.Name)
        {
            categoryModified.Changed.Name = true;
        }
        var result = await CategoryService.UpdateCategory(categoryModified, AccountId);
        if (result) await BlazoredModal.CloseAsync();
    }
    
    private string getImageDataFromBytes(byte[] imageData)
    {
        string base64Image = Convert.ToBase64String(imageData);
        return $"data:image/png;base64,{base64Image}";
    }
    
    private async Task<byte[]> GetFileData(string objectURL)
    {
        using (var httpClient = new HttpClient())
        {
            return await httpClient.GetByteArrayAsync(objectURL);
        }
    }
}