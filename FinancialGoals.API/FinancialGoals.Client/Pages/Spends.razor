@page "/spends"
@using FinancialGoals.Client.Services.AccountService
@using FinancialGoals.Core.DTOs.Account

@inject IAccountService AccountService
@implements IDisposable
<PageTitle>Spends</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (AccountService.Accounts == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <Segmented TValue="int" Block @bind-Value="@AccountService.CurrentAccountId" 
                       OnChange="OnValueChanged" 
                       DefaultValue="@AccountService.CurrentAccountId">
                @foreach (var account in AccountService.Accounts)
                {
                    <SegmentedItem Label=@(account.Name) Value=@(account.FinancialAccountId) @key=@account.FinancialAccountId/>
                }
            </Segmented>
        }
    </Authorized>
    <NotAuthorized>
        <h3>Hello</h3>
    </NotAuthorized>
</AuthorizeView>

@code
{
    List<string> financialAccountsNames = new List<string>();
    List<int> financialAccountsIds = new List<int>();
    List<AccountToReturn> accounts = new List<AccountToReturn>();
    private int selectedValue = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await AccountService.GetAccounts();
        AccountService.Accounts.ForEach(acc =>
        {
            financialAccountsNames.Add(acc.Name);
            financialAccountsIds.Add(acc.FinancialAccountId);
            accounts.Add(acc);
        });
        Console.WriteLine($"onInitialized: {financialAccountsNames.Count}");
        Console.WriteLine($"onInitialized CurrentAccountId: {AccountService.CurrentAccountId}");
        AccountService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        Console.WriteLine("dispose");
        AccountService.OnChange -= StateHasChanged;
    }

    private void OnValueChanged(int value)
    {
        AccountService.CurrentAccountId = value;
        Console.WriteLine("Selected Value: " + value);
    }
}

