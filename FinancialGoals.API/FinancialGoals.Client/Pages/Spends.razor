@page "/spends"
@using FinancialGoals.Client.Services.AccountService
@using FinancialGoals.Core.DTOs.Account
@using FinancialGoals.Core.DTOs.Transaction
@using FinancialGoals.Services

@inject IAccountService AccountService
@inject ICategoryService CategoryService
@inject ITransactionService TransactionService
@implements IDisposable
<PageTitle>Spends</PageTitle>

@if (addedSuccessfully)
{
    <Alert Type="@AlertType.Success" Message="Transaction added successfully!" Closable Style="font-family: EightBitsFont; margin-bottom: 20px"/>
}


@if (AccountService.Accounts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <Segmented TValue="int" Block @bind-Value="@AccountService.CurrentAccountId" 
               OnChange="OnValueChanged" 
               DefaultValue="@AccountService.CurrentAccountId"
               Style="font-family: EightBitsFont"
               Size="SegmentedSize.Large">
        @foreach (var account in AccountService.Accounts)
        {
            <SegmentedItem Label=@(account.Name) Value=@(account.FinancialAccountId) @key=@account.FinancialAccountId/>
        }
    </Segmented>
    
    <div>
        <GridRow Style="height: 1000px; font-family: EightBitsFont">
            <GridCol Span="12">
                <GridRow Style="height: 150px">
                    <AntDesign.InputNumber Size="@InputSize.Large" @bind-Value="currentInput" Min=0
                                           Style="width: 80%; 
                                           height: 50px; 
                                           border-radius: 5px; 
                                           font-size: 28px; 
                                           margin-left: auto; 
                                           margin-right: auto; 
                                           margin-top: 45px"/>
                </GridRow>
                <GridRow Style=" width: 80%; margin: auto">
                    <GridCol Span="24">
                        <GridRow Gutter="(16,24)">
                            @foreach (var button in namesOfButtons)
                            {
                                <GridCol Class="gutter-row" Span="8">
                                    <Button style="@style" OnClick="() => HandleButtonClick(button)">@button</Button>
                                </GridCol>
                            }
                        </GridRow>
                    </GridCol>
                </GridRow>
                <GridRow Style="width:80%; margin-right: auto; margin-left: auto; margin-top: 45px; border-radius: 5px">
                    <TextArea Placeholder="Notes"  AllowClear="true" @bind-Value="notes" 
                            Style="font-size: 28px; "/>
                </GridRow>
            </GridCol>
            <GridCol Span="12">
                <GridRow>
                    @foreach (var category in CategoryService.Categories.Where(x => x.FinancialAccountIds.Contains(AccountService.CurrentAccountId)))
                    {
                        <GridCol Span="4" Style="margin-top: 45px; margin-left: 20px">
                            <div onclick="@(() => handleCategoryId(category.CategoryId))">
                                <Card Hoverable Style="@(category.CategoryId == selectedCategoryId ? styleForCard : "width: 130px; border-radius: 5px;")" Cover="coverTemplate(category.Image.ImageBytes, category.Image.ImageName)">
                                    <CardMeta Style="justify-content: center" Title="@category.Name" />
                                </Card>
                            </div>
                        </GridCol>
                    }
                </GridRow>
            </GridCol>
        </GridRow>
    </div>
}

@code
{
    private int selectedAccountId;
    private int selectedCategoryId;
    private string notes = string.Empty;

    List<string> namesOfButtons = new List<string> {"7", "8", "9", "4", "5", "6", "1", "2", "3", "C", "0", "Add"};
    private int? currentInput = 0;
    private bool isNewInput = true;
    private bool addedSuccessfully = false;

    string styleForCard = "width: 130px; border: 2px solid #001529; background-color: gold; box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border-radius: 5px;";
    string style="background: gold; padding: 8px 0; width: 100%; height: auto; font-size: 28px; border-radius: 5px;";
    
    protected override async Task OnInitializedAsync()
    {
        await AccountService.GetAccounts();
        await CategoryService.GetCategories();
        selectedCategoryId = CategoryService.Categories[0].CategoryId;
        selectedAccountId = AccountService.Accounts[0].FinancialAccountId;
        AccountService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AccountService.OnChange -= StateHasChanged;
    }

    private void OnValueChanged(int value)
    {
        AccountService.CurrentAccountId = value;
    }
    
    private string getImageDataFromBytes(byte[] imageData)
    {
        string base64Image = Convert.ToBase64String(imageData);
        return $"data:image/png;base64,{base64Image}";
    }
    
    RenderFragment coverTemplate (byte[] imageData, string imageName) => 
        @<img Style="width: 75px; margin: auto; margin-top: 10%" alt="@imageName" src="@getImageDataFromBytes(imageData)" />;

    private void handleCategoryId(int value)
    {
        this.selectedCategoryId = value;
        StateHasChanged();
    }
    
    private async Task HandleButtonClick(string button)
    {
        if (int.TryParse(button, out _))
        {
            if (isNewInput)
            {
                currentInput = int.Parse(button);
                isNewInput = false;
            }
            else
            {
                currentInput = int.Parse(currentInput.ToString() + button);
            }
        }
        else if (button == "C")
        {
            currentInput = 0;
            isNewInput = true;
        }
        else
        {
            var transaction = new TransactionToCreate
            {
                FinancialAccountId = selectedAccountId,
                CategoryId = selectedCategoryId,
                Date = DateTime.Now,
                Type = TransactionType.Expense,
                Amount = (int)currentInput,
                Description = notes
            };
            addedSuccessfully = await TransactionService.AddTransaction(transaction);
            currentInput = 0;
            notes = string.Empty;
            TransactionService.OnChange += StateHasChanged;
        }
    }
}

