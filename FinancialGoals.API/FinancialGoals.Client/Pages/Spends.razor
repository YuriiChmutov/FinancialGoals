@page "/spends"
@using FinancialGoals.Client.Services.AccountService
@using FinancialGoals.Core.DTOs.Account
@using FinancialGoals.Core.DTOs.Transaction
@using FinancialGoals.Services

@inject IAccountService AccountService
@inject ICategoryService CategoryService
@inject ITransactionService TransactionService
@implements IDisposable
<PageTitle>Spends</PageTitle>

@if (addedSuccessfully)
{
    <AlertWindow Type="@AlertType.Success" Message="Transaction added successfully!" Closable Style="font-family: EightBitsFont; margin-bottom: 20px"/>
}


@if (AccountService.Accounts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <Segmented TValue="int" Block @bind-Value="@AccountService.CurrentAccountId" 
               OnChange="OnValueChanged" 
               DefaultValue="@AccountService.CurrentAccountId"
               Style="font-family: EightBitsFont"
               Size="SegmentedSize.Large">
        @foreach (var account in AccountService.Accounts)
        {
            <SegmentedItem Label=@(account.Name) Value=@(account.FinancialAccountId) @key=@account.FinancialAccountId/>
        }
    </Segmented>
    
    <div>
        <GridRow Style="height: 1000px; font-family: EightBitsFont">
            <GridCol Span="12">
                <GridRow Style="height: 150px">
                    <AntDesign.InputNumber Size="@InputSize.Large" @bind-Value="currentInput" Min=0
                                           Style="width: 80%; 
                                           height: 50px; 
                                           border-radius: 5px; 
                                           font-size: 28px; 
                                           margin-left: auto; 
                                           margin-right: auto; 
                                           margin-top: 45px"/>
                </GridRow>
                
                <GridRow Style="width: 80%; margin: auto; padding-bottom: 5%">
                    <GridCol Span="24">
                        <GridRow Gutter="(16,24)">
                            <GridCol Class="gutter-row" Span="12">
                                <Button style=@styleForPlusMinusButton(transactionType[TransactionType.Income])
                                        OnClick="HandlePlusButtonClick">
                                    +
                                </Button>
                            </GridCol>
                            <GridCol Class="gutter-row" Span="12">
                                <Button style=@styleForPlusMinusButton(transactionType[TransactionType.Expense])
                                        OnClick="HandleMinusButtonClick">
                                    -
                                </Button>
                            </GridCol>
                        </GridRow>
                    </GridCol>
                </GridRow>
                
                <GridRow Style=" width: 80%; margin: auto">
                    <GridCol Span="24">
                        <GridRow Gutter="(16,24)">
                            @foreach (var button in namesOfButtons)
                            {
                                <GridCol Class="gutter-row" Span="8">
                                    <Button style="@style" OnClick="() => HandleButtonClick(button)">@button</Button>
                                </GridCol>
                            }
                        </GridRow>
                    </GridCol>
                </GridRow>
                <GridRow Style="width:80%; margin-right: auto; margin-left: auto; margin-top: 45px; border-radius: 5px">
                    <TextArea Placeholder="Notes"  AllowClear="true" @bind-Value="notes" 
                            Style="font-size: 28px; width: 100%";/>
                </GridRow>
            </GridCol>
            <GridCol Span="12">
                <GridRow>
                    @if (transactionType[TransactionType.Expense])
                    {
                        foreach (var category in CategoryService.Categories
                            .Where(x => x.FinancialAccountId == AccountService.CurrentAccountId && x.TransactionType == TransactionType.Expense))
                        {
                            <GridCol Span="4" Style="margin-top: 45px; margin-left: 20px">
                                <div onclick="@(() => handleCategoryId(category.CategoryId))">
                                    <Card Hoverable Style="@(category.CategoryId == selectedCategoryId ? styleForSelectedCategoryCard : "width: 130px; border-radius: 5px;")" Cover="coverTemplate(category.Image.ImageBytes, category.Image.ImageName)">
                                        <CardMeta Style="justify-content: center" Title="@category.Name"/>
                                    </Card>
                                </div>
                            </GridCol>
                        }
                    }
                    else
                    {
                        foreach (var category in CategoryService.Categories
                            .Where(x => x.FinancialAccountId == AccountService.CurrentAccountId && x.TransactionType == TransactionType.Income))
                        {
                            <GridCol Span="4" Style="margin-top: 45px; margin-left: 20px">
                                <div onclick="@(() => handleCategoryId(category.CategoryId))">
                                    <Card Hoverable Style="@(category.CategoryId == selectedCategoryId ? styleForSelectedCategoryCard : "width: 130px; border-radius: 5px;")" Cover="coverTemplate(category.Image.ImageBytes, category.Image.ImageName)">
                                        <CardMeta Style="justify-content: center" Title="@category.Name"/>
                                    </Card>
                                </div>
                            </GridCol>
                        }
                    }
                </GridRow>
            </GridCol>
        </GridRow>
    </div>
}

@code
{
    private int selectedCategoryId;
    private string notes = string.Empty;

    List<string> namesOfButtons = new List<string> {"7", "8", "9", "4", "5", "6", "1", "2", "3", "C", "0", "Add"};
    private int? currentInput = 0;
    private bool isNewInput = true;
    private bool addedSuccessfully = false;

    private Dictionary<TransactionType, bool> transactionType;

    string styleForSelectedCategoryCard = "width: 130px; border: 2px solid #001529; background-color: gold; box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border-radius: 5px;";
    string styleForPlusMinusButton (bool selected) => $"background: {(selected ? "gold" : "white" )}; padding: 8px 0; width: 100%; height: auto; font-size: 28px; border-radius: 5px;";
    string style="background: gold; padding: 8px 0; width: 100%; height: auto; font-size: 28px; border-radius: 5px;";
    
    protected override async Task OnInitializedAsync()
    {
        if (AccountService.Accounts == null) await AccountService.GetAccounts();
        if (CategoryService.Categories == null) await CategoryService.GetCategories();
        
        if (AccountService.CurrentAccountId < 1 || AccountService.CurrentAccountId == null)
        {
            AccountService.CurrentAccountId = AccountService.Accounts[0].FinancialAccountId;
        }
        selectedCategoryId = CategoryService.Categories.First(x => x.FinancialAccountId == AccountService.CurrentAccountId).CategoryId;

        transactionType = new Dictionary<TransactionType, bool>
        {
            {TransactionType.Expense, true},
            {TransactionType.Income, false}
        };
        
        AccountService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AccountService.OnChange -= StateHasChanged;
    }

    private void OnValueChanged(int value)
    {
        AccountService.CurrentAccountId = value;
        selectedCategoryId = CategoryService.Categories
            .First(x => x.FinancialAccountId == AccountService.CurrentAccountId 
                        && x.TransactionType == (transactionType[TransactionType.Income] ? TransactionType.Income : TransactionType.Expense)).CategoryId;
    }
    
    private string getImageDataFromBytes(byte[] imageData)
    {
        string base64Image = Convert.ToBase64String(imageData);
        return $"data:image/png;base64,{base64Image}";
    }
    
    RenderFragment coverTemplate (byte[] imageData, string imageName) => 
        @<img Style="width: 75px; margin: auto; margin-top: 10%" alt="@imageName" src="@getImageDataFromBytes(imageData)" />;

    private void handleCategoryId(int value)
    {
        this.selectedCategoryId = value;
        StateHasChanged();
    }

    private async Task HandlePlusButtonClick()
    {
        transactionType[TransactionType.Income] = true; 
        transactionType[TransactionType.Expense] = false; 
        selectedCategoryId = CategoryService.Categories
            .First(x => x.FinancialAccountId == AccountService.CurrentAccountId && x.TransactionType == TransactionType.Income).CategoryId;

        CategoryService.OnChange += StateHasChanged;
    }
    
    private async Task HandleMinusButtonClick()
    {
        transactionType[TransactionType.Income] = false; 
        transactionType[TransactionType.Expense] = true; 
        selectedCategoryId = CategoryService.Categories
            .First(x => x.FinancialAccountId == AccountService.CurrentAccountId && x.TransactionType == TransactionType.Expense).CategoryId;

        CategoryService.OnChange += StateHasChanged;
    }
    
    private async Task HandleButtonClick(string button)
    {
        if (int.TryParse(button, out _))
        {
            if (isNewInput)
            {
                currentInput = int.Parse(button);
                isNewInput = false;
            }
            else
            {
                currentInput = int.Parse(currentInput.ToString() + button);
            }
        }
        else if (button == "C")
        {
            currentInput = 0;
            isNewInput = true;
        }
        else
        {
            var transaction = new TransactionToCreate
            {
                FinancialAccountId = AccountService.CurrentAccountId,
                CategoryId = selectedCategoryId,
                Date = DateTime.Now,
                Type = transactionType[TransactionType.Expense] ? TransactionType.Expense : TransactionType.Income,
                Amount = (int)currentInput,
                Description = notes
            };
            addedSuccessfully = await TransactionService.AddTransaction(transaction);
            currentInput = 0;
            notes = string.Empty;
            TransactionService.OnChange += StateHasChanged;
        }
    }
}

