@page "/transactions"


@using FinancialGoals.Services
@using FinancialGoals.Client.Services.AccountService
@using FinancialGoals.Core.DTOs.Transaction

@inject IModalService modal
@inject ITransactionService TransactionService
@inject IAccountService AccountService
@implements IDisposable

@if (AccountService.Accounts == null)
{
    <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
        <GridRow Align="middle">
            <GridCol Span="24" >
                <Spin/>
            </GridCol>
        </GridRow>
    </div>
}
else
{
    <Segmented TValue="int" Block @bind-Value="@AccountService.CurrentAccountId"
               OnChange="OnValueChanged"
               DefaultValue="@AccountService.CurrentAccountId"
               Style="font-family: EightBitsFont"
               Size="SegmentedSize.Large">
        @foreach (var account in AccountService.Accounts)
        {
            <SegmentedItem Label=@(account.Name) Value=@(account.FinancialAccountId) @key=@account.FinancialAccountId/>
        }
    </Segmented>

    @if (Loading)
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
            <GridRow Align="middle">
                <GridCol Span="24" >
                    <Spin/>
                </GridCol>
            </GridRow>
        </div>
    }
    @if (TransactionService.Transactions.Count > 0)
    {
        <AntList Class="demo-loadmore-list" 
                 DataSource="@TransactionService.Transactions" 
                 ItemLayout="ListItemLayout.Horizontal" 
                 Loading="@InitLoading"
                 Style="font-family: EightBitsFont">
            <ChildContent Context="item">
                <ListItem Actions="@(new[]{
                                       edit,
                                       more(() => OpenDetailsForm(item))
                                   })">
                    <ListItemMeta AvatarTemplate="imageFragment(item.CategoryToReturn.Image.ImageBytes, item.CategoryToReturn.Image.ImageName)" Description="@item.Description">
                        <TitleTemplate>
                            <a href="https://ant.design">@item.CategoryToReturn.Name</a>
                        </TitleTemplate>
                    </ListItemMeta>
                    <div>
                        @{
                            var sign = (item.Type == TransactionType.Income) ? "+" : "-";
                        }
                        @sign @item.Amount
                        @AccountService.Accounts.FirstOrDefault(x => x.FinancialAccountId == AccountService.CurrentAccountId)?.CurrencyInfo.Currency
                    </div>
                </ListItem>
            </ChildContent>
        </AntList>

        <Pagination Style="font-family: EightBitsFont" Simple Current="@(TransactionService.CurrentPage)" Total="@(TransactionService.PageCount * 10)" OnChange="HandlePageChange" />
    }
    else
    {
        <Divider Style="font-family: EightBitsFont">You don't have any transactions yet.</Divider>
    }
}




@code {
    public bool InitLoading { get; set; } = true;
    public bool Loading { get; set; } = false;

    private Dictionary<int, List<TransactionToReturn>> transactionsForAccounts = new Dictionary<int, List<TransactionToReturn>>(); 

    static RenderFragment avatar =@<Avatar Src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"></Avatar>;
    static RenderFragment edit = @<a key="list-loadmore-edit">edit</a>;
    RenderFragment more(Action clickAction) => @<a key="list-loadmore-more" onclick="@clickAction">more</a>;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData(AccountService.CurrentAccountId, TransactionService.CurrentPage);
        if (AccountService.CurrentAccountId == 0)
        {
            AccountService.CurrentAccountId = AccountService.Accounts[0].FinancialAccountId;
        }
    }
    
    public void Dispose()
    {
        TransactionService.OnChange -= StateHasChanged;
    }
    
    private async Task LoadData(int accountId, int page)
    {
        InitLoading = true;
        await TransactionService.GetTransactionsForAccount(accountId, page);
        InitLoading = false;
    }
    
    private async Task HandlePageChange(PaginationEventArgs args)
    {
        await LoadData(AccountService.CurrentAccountId, args.Page);
        TransactionService.CurrentPage = args.Page;
        TransactionService.OnChange += StateHasChanged;
    }
    
    private async Task OnValueChanged(int value)
    {
        Loading = true;
        AccountService.CurrentAccountId = value;
        await LoadData(AccountService.CurrentAccountId, TransactionService.CurrentPage);
        Loading = false;
    }
    
    RenderFragment imageFragment (byte[] imageData, string imageName) => 
        @<img Style="width: 50px; margin: auto" alt="@imageName" src="@getImageDataFromBytes(imageData)" />;
    
    private string getImageDataFromBytes(byte[] imageData)
    {
        string base64Image = Convert.ToBase64String(imageData);
        return $"data:image/png;base64,{base64Image}";
    }

    private void OpenDetailsForm(TransactionToReturn transaction)
    {
        var parameters = new ModalParameters()
            .Add("Transaction", transaction);
        modal.Show<TransactionDetails>($"Details", parameters);
    }
}
