@using FinancialGoals.Core.DTOs.User
@inject IAuthService AuthService

<div class="container py-5 h-100">
    <EditForm Model="userChangePassword" OnValidSubmit="HandleChangePassword">
        <DataAnnotationsValidator/>
        
        <div class="form-outline mb-4">
            <label for="password">New password</label>
            <InputText id="password" @bind-Value="userChangePassword.Password" class="form-control" type="password"/>
            <ValidationMessage For="@(() => userChangePassword.Password)"/>
        </div>
        
        <div class="form-outline mb-4">
            <label for="confirmPassword">Confirm password</label>
            <InputText id="confirmPassword" @bind-Value="userChangePassword.ConfirmPassword" class="form-control" type="password"/>
            <ValidationMessage For="@(() => userChangePassword.ConfirmPassword)"/>
        </div>
        
        <button type="submit" class="btn btn-primary col-md-12 mb-4">Change password</button>
        
        <div class="text-danger">
            <span>@message</span>
        </div>
    </EditForm>
    <div class="text-danger">
        <span>@errorMessage</span>
    </div>
</div>

@code {
    private UserChangePassword userChangePassword = new UserChangePassword(); 
    private string errorMessage = string.Empty;
    private string message = string.Empty;
    
    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task HandleChangePassword()
    {
        var response = await AuthService.ChangePassword(userChangePassword);
        message = response.Message;
        if (response.Data)
        {
            await BlazoredModal.CloseAsync();
        }
    }
}